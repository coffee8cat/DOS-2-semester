Turbo Assembler	 Version 4.1	    02/12/25 18:03:30	    Page 1
frame.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4
      5	0100  FC		     Start:	 cld
      6	0101  BB B800				 mov bx, 0b800h		     ; beginnig	of video mem segment
      7	0104  8E C3				 mov es, bx
      8
      9	0106  B9 0030				 mov cx, 30h		     ; frame length
     10	0109  BA 0010				 mov dx, 10h		     ; frame height
     11
     12	010C  E8 0035				 call CalcFrameStart
     13
     14	010F  B4 04				 mov ah, 04h		     ; frame color
     15	0111  BE 01D8r				 mov si, offset	Sequence
     16
     17	0114  57				 push di
     18	0115  E8 0050				 call DrawFrame
     19	0118  5F				 pop di
     20
     21
     22	0119  81 C7 00A0			 add di, 0A0h
     23	011D  81 C7 00A0			 add di, 0A0h
     24	0121  81 C7 00A0			 add di, 0A0h
     25	0125  81 C7 00A0			 add di, 0A0h
     26	0129  83 C7 20				 add di, 020h
     27	012C  B4 03				 mov ah, 03h
     28	012E  BE 01E1r				 mov si, offset	String
     29
     30	0131  E8 006C				 call WriteString
     31
     32	0134  BF 01E1r				 mov di, offset	String
     33	0137  E8 0071				 call Strlen
     34
     35	013A  BF 01D4r				 mov di, offset	AtoiTest
     36	013D  E8 007D				 call atoi10
     37
     38	0140  B4 4C				 mov ah, 4ch			     ; DOS Fn 4ch = exit(al)
     39	0142  CD 21				 int 21h				     ; DOS Fn 21h = system(ah)
     40
     41				     ;===============================================================================================
     42				     ==============
     43				     ; Calculates the start position for a frame in video mem
     44				     ; Entry:	 cx - length of	the frame
     45				     ;		 dx - height of	the frame
     46				     ; Exit:	 di - pointer to a start position
     47				     ; Destr:	 ax
     48				     ;===============================================================================================
     49				     ==============
     50	0144			     CalcFrameStart  proc
     51
     52	0144  51				 push cx
     53	0145  52				 push dx
     54	0146  8B C2				 mov ax, dx
     55
     56						 ; 80 -	cx / 2 + 160 * (14 - h / 2)
     57	0148  D1 E8				 shr ax, 1
Turbo Assembler	 Version 4.1	    02/12/25 18:03:30	    Page 2
frame.asm



     58
     59	014A  BF 0050				 mov di, 50h
     60	014D  2B F9				 sub di, cx
     61
     62	014F  2D 000E				 sub ax, 0Eh
     63	0152  F7 D8				 neg ax
     64	0154  D1 E0 D1 E0 D1 E0	D1+		 shl ax, 5
     65	      E0 D1 E0
     66
     67	015E  B9 0005				 mov cx, 05h
     68	0161  F7 E1				 mul cx
     69
     70	0163  03 F8				 add di, ax
     71
     72	0165  5A				 pop dx
     73	0166  59				 pop cx
     74
     75	0167  C3				 ret
     76	0168					 endp
     77
     78				     ;===============================================================================================
     79				     ==============
     80				     ; Draws a frame in	video mem described with 9 bytes
     81				     ; Entry:	 ah - color
     82				     ;		 si - pointer to 9 byte	sequence
     83				     ;		 cx - length of	the frame
     84				     ;		 dx - height of	the frame
     85				     ; Exit:	 None
     86				     ; Destr:	 al, si, di
     87				     ;===============================================================================================
     88				     ==============
     89	0168			     DrawFrame	 proc
     90
     91	0168  52				 push dx
     92
     93	0169  E8 001C				 call DrawLine
     94	016C  83 C6 03				 add si, 03h
     95
     96	016F  FE CA				 dec dl
     97	0171  FE CA				 dec dl
     98	0173			     height:
     99	0173  E8 0012				 call DrawLine
    100	0176  FE CA				 dec dl
    101	0178  80 FA 00				 cmp dl, 0h
    102	017B  77 F6				 ja height
    103
    104	017D  83 C6 03				 add si, 03h
    105
    106	0180  E8 0005				 call DrawLine
    107	0183  83 C6 03				 add si, 03h
    108
    109	0186  5A				 pop dx
    110
    111	0187  C3				 ret
    112	0188					 endp
    113
    114				     ;===============================================================================================
Turbo Assembler	 Version 4.1	    02/12/25 18:03:30	    Page 3
frame.asm



    115				     ==============
    116				     ; Draws line described with 3 bytes in video mem
    117				     ; 1 time first byte, (cx-2) times - second	byte and then third byte
    118				     ; 121 (cx = 6) => 122221
    119				     ; Entry:	 ah - color
    120				     ;		 si - pointer to 3 byte	sequence
    121				     ;		 cx - length of	the frame
    122				     ; Exit:	 None
    123				     ; Destr:	 al, di
    124				     ;===============================================================================================
    125				     ==============
    126	0188			     DrawLine	 proc
    127
    128	0188  56				 push si	 ; save	si
    129	0189  51				 push cx	 ; save	cx
    130
    131	018A  49				 dec cx
    132	018B  49				 dec cx
    133
    134	018C  AC				 lodsb		 ; reading first byte of sequance to al
    135	018D  AB				 stosw		 ; writing to video mem
    136
    137	018E  AC				 lodsb		 ; reading second byte
    138	018F  F3> AB				 rep stosw	 ; writing (cx - 2) times to video mem
    139
    140	0191  AC				 lodsb		 ; reading first byte of sequance to al
    141	0192  AB				 stosw		 ; writing to video mem
    142
    143	0193  59				 pop cx		 ; save	cx
    144
    145	0194  D1 E1				 shl cx, 1	 ; shift di to the beginning of	the next string
    146	0196  81 C7 00A0			 add di, 0A0h
    147	019A  2B F9				 sub di, cx
    148	019C  D1 E9				 shr cx, 1
    149
    150	019E  5E				 pop si		 ; save	si
    151
    152	019F  C3				 ret
    153	01A0					 endp
    154
    155				     ;===============================================================================================
    156				     ==============
    157				     ; Writes a	string ending with '$' in video	mem
    158				     ; Entry:	 ah - color
    159				     ;		 si - pointer to a string
    160				     ;		 di - pointer to video mem for beginning of the	string
    161				     ; Exit:	 None
    162				     ; Destr:	 cx, si, di
    163				     ;===============================================================================================
    164				     ==============
    165	01A0			     WriteString proc
    166
    167				     ; condition check
    168	01A0  B1 00				 mov cl, 00h
    169
    170	01A2  38 0C		     condition:	 cmp ds:[si], cl    ; while (ds:[si] !=	'$')
    171	01A4  74 04				 je while_end
Turbo Assembler	 Version 4.1	    02/12/25 18:03:30	    Page 4
frame.asm



    172
    173	01A6  AC				 lodsb		     ; al = ds:[si++]
    174	01A7  AB				 stosw		     ; es:[di] = ax, di+=2
    175	01A8  EB F8				 jmp condition
    176
    177	01AA			     while_end:
    178
    179	01AA  C3				 ret
    180	01AB					 endp
    181
    182				     ;===============================================================================================
    183				     ==============
    184				     ; Countes length of string	ending with '$'
    185				     ; Entry:	 di - pointer to a string
    186				     ; Exit:	 cx - length of	the string
    187				     ; Destr:	 al, si, cx
    188				     ;===============================================================================================
    189				     ==============
    190	01AB			     Strlen  proc
    191	01AB  06			     push es
    192	01AC  8C D8			     mov ax, ds
    193	01AE  8E C0			     mov es, ax
    194
    195	01B0  33 C0			     xor ax, ax
    196	01B2  FC			     cld
    197	01B3  B9 FFFF			     mov cx, -1
    198
    199	01B6  F2> AE			     repne scasb
    200	01B8  F7 D9			     neg cx
    201	01BA  49			     dec cx
    202
    203	01BB  07			     pop es
    204				     ;	      xor ax, ax
    205				     ;	      xor cx, cx
    206				     ;	      dec di
    207
    208				     ;test_condition: ;	while(ds:[di] != ax) { di++ }
    209				     ;
    210				     ;	      inc di
    211				     ;	      inc cx
    212				     ;	      cmp ds:[di], al
    213				     ;	      jne test_condition
    214
    215				     ;	      dec cx
    216
    217	01BC  C3			     ret
    218	01BD				     endp
    219
    220				     ;===============================================================================================
    221				     ==============
    222				     ; Countes length of string	ending with '$'
    223				     ; Entry:	 di - pointer to a string with number
    224				     ; Exit:	 ax - number extracted from string
    225				     ; Destr:	 di, ax, dx
    226				     ;===============================================================================================
    227				     ==============
    228	01BD			     atoi10  proc
Turbo Assembler	 Version 4.1	    02/12/25 18:03:30	    Page 5
frame.asm



    229
    230	01BD  33 C0			     xor ax, ax
    231	01BF  33 D2			     xor dx, dx
    232	01C1  B6 30			     mov dh, '0'
    233	01C3  B3 0A			     mov bl, 0Ah
    234
    235	01C5			     test_condition2:  ; while (ds:[di]	- '0' <	10) { ax = ax *	10 + [di] - '0'}
    236	01C5  F6 E3			     mul bl
    237	01C7  02 C2			     add al, dl
    238
    239	01C9  8A 15			     mov dl, ds:[di]
    240	01CB  2A D6			     sub dl, dh
    241
    242	01CD  47			     inc di
    243	01CE  80 FA 0A			     cmp dl, 0Ah
    244	01D1  72 F2			     jb	test_condition2
    245
    246	01D3  C3			     ret
    247	01D4				     endp
    248
    249
    250	01D4  31 32 33 62	     AtoiTest:	 db '123b'
    251
    252	01D8  31 32 33 34 35 36	37+  Sequence:	 db '123456789'
    253	      38 39
    254
    255	01E1  48 65 6C 6C 6F 20	74+  String:	 db 'Hello there?', 00h, '!!!NOTFORPRINT!!!'
    256	      68 65 72 65 3F 00	21+
    257	      21 21 4E 4F 54 46	4F+
    258	      52 50 52 49 4E 54	21+
    259	      21 21
    260
    261
    262				     end     Start
Turbo Assembler	 Version 4.1	    02/12/25 18:03:30	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/12/25"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "18:03:30"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI10				  Near	 DGROUP:01BD
ATOITEST			  Near	 DGROUP:01D4
CALCFRAMESTART			  Near	 DGROUP:0144
CONDITION			  Near	 DGROUP:01A2
DRAWFRAME			  Near	 DGROUP:0168
DRAWLINE			  Near	 DGROUP:0188
HEIGHT				  Near	 DGROUP:0173
SEQUENCE			  Near	 DGROUP:01D8
START				  Near	 DGROUP:0100
STRING				  Near	 DGROUP:01E1
STRLEN				  Near	 DGROUP:01AB
TEST_CONDITION2			  Near	 DGROUP:01C5
WHILE_END			  Near	 DGROUP:01AA
WRITESTRING			  Near	 DGROUP:01A0

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01FF Word	  Public  CODE
