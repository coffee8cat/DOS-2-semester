Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 1
frame.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4				     locals @@
      5
      6	0100			     Start:
      7	0100  FC			     cld
      8	0101  BB B800 90		     mov bx, VideoMemSegment	 ; set es to the beginnig of video mem segment
      9	0105  8E C3			     mov es, bx
     10
     11	0107  BF 0081 90		     mov di, CMD_args_start	 ; pointer to command line arguments
     12
     13	010B  E8 0094			     call SkipSpaces
     14
     15	010E  E8 00B7			     call atoi10		 ; read	frame length
     16	0111  8B C8			     mov cx, ax
     17
     18	0113  E8 008C			     call SkipSpaces
     19
     20	0116  E8 00AF			     call atoi10		 ; read	frame height
     21	0119  8B D0			     mov dx, ax
     22
     23	011B  E8 0084			     call SkipSpaces
     24
     25	011E  52			     push dx
     26	011F  E8 00A6			     call atoi10
     27	0122  5A			     pop dx
     28
     29	0123  8A E0			     mov ah, al
     30
     31	0125  E8 007A			     call SkipSpaces
     32
     33	0128  52			     push dx
     34	0129  E8 009C			     call atoi10
     35	012C  50			     push ax
     36
     37	012D  B2 09			     mov dl, 9
     38	012F  F6 E2			     mul dl
     39
     40	0131  BE 01FDr			     mov si, offset Sequence
     41	0134  03 F0			     add si, ax
     42
     43	0136  58			     pop ax
     44	0137  5A			     pop dx
     45
     46	0138  E8 000B			     call CalcFrameStart
     47
     48	013B  B4 04			     mov ah, 04h		 ; frame color
     49
     50	013D  57			     push di
     51	013E  E8 0029			     call DrawFrame
     52	0141  5F			     pop di
     53
     54
     55					     ;add di, 0A0h
     56					     ;add di, 0A0h
     57					     ;add di, 0A0h
Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 2
frame.asm



     58					     ;add di, 0A0h
     59					     ;add di, 020h
     60					     ;mov ah, 03h
     61					     ;mov si, offset String
     62
     63					     ;call WriteString
     64
     65					     ;mov di, offset String
     66					     ;call Strlen
     67
     68	0142  B4 4C			     mov ah, 4ch			     ; DOS Fn 4ch = exit(al)
     69	0144  CD 21			     int 21h				     ; DOS Fn 21h = system(ah)
     70
     71				     ;===============================================================================================
     72				     ==============
     73				     ; Calculates the start position for a frame in video mem
     74				     ; Entry:	 cx - length of	the frame
     75				     ;		 dx - height of	the frame
     76				     ; Exit:	 di - pointer to a start position
     77				     ; Destr:	 ax
     78				     ;===============================================================================================
     79				     ==============
     80	0146			     CalcFrameStart  proc
     81
     82	0146  51			     push cx
     83	0147  52			     push dx
     84	0148  8B C2			     mov ax, dx
     85
     86					     ; 80 - cx / 2 + 160 * (14 - h / 2)
     87	014A  D1 E8			     shr ax, 1
     88
     89	014C  BF 0050			     mov di, 50h
     90	014F  2B F9			     sub di, cx
     91
     92	0151  2D 000E			     sub ax, 0Eh
     93	0154  F7 D8			     neg ax
     94	0156  D1 E0 D1 E0 D1 E0	D1+	     shl ax, 5
     95	      E0 D1 E0
     96
     97	0160  B9 0005			     mov cx, 05h
     98	0163  F7 E1			     mul cx
     99
    100	0165  03 F8			     add di, ax
    101
    102	0167  5A			     pop dx
    103	0168  59			     pop cx
    104
    105	0169  C3			     ret
    106	016A				     endp
    107
    108				     ;===============================================================================================
    109				     ==============
    110				     ; Draws a frame in	video mem described with 9 bytes
    111				     ; Entry:	 ah - color
    112				     ;		 si - pointer to 9 byte	sequence
    113				     ;		 cx - length of	the frame
    114				     ;		 dx - height of	the frame
Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 3
frame.asm



    115				     ; Exit:	 None
    116				     ; Destr:	 al, si, di
    117				     ;===============================================================================================
    118				     ==============
    119	016A			     DrawFrame	 proc
    120
    121	016A  52			     push dx
    122
    123	016B  E8 001C			     call DrawLine
    124	016E  83 C6 03			     add si, 03h
    125
    126	0171  FE CA			     dec dl
    127	0173  FE CA			     dec dl
    128	0175			     height:
    129	0175  E8 0012			     call DrawLine
    130	0178  FE CA			     dec dl
    131	017A  80 FA 00			     cmp dl, 0h
    132	017D  77 F6			     ja	height
    133
    134	017F  83 C6 03			     add si, 03h
    135
    136	0182  E8 0005			     call DrawLine
    137	0185  83 C6 03			     add si, 03h
    138
    139	0188  5A			     pop dx
    140
    141	0189  C3			     ret
    142	018A				     endp
    143
    144				     ;===============================================================================================
    145				     ==============
    146				     ; Draws line described with 3 bytes in video mem
    147				     ; 1 time first byte, (cx-2) times - second	byte and then third byte
    148				     ; 121 (cx = 6) => 122221
    149				     ; Entry:	 ah - color
    150				     ;		 si - pointer to 3 byte	sequence
    151				     ;		 cx - length of	the frame
    152				     ; Exit:	 None
    153				     ; Destr:	 al, di
    154				     ;===============================================================================================
    155				     ==============
    156	018A			     DrawLine	 proc
    157
    158	018A  56			     push si	     ; save si
    159	018B  51			     push cx	     ; save cx
    160
    161	018C  49			     dec cx
    162	018D  49			     dec cx
    163
    164	018E  AC			     lodsb	     ; reading first byte of sequance to al
    165	018F  AB			     stosw	     ; writing to video	mem
    166
    167	0190  AC			     lodsb	     ; reading second byte
    168	0191  F3> AB			     rep stosw	     ; writing (cx - 2)	times to video mem
    169
    170	0193  AC			     lodsb	     ; reading first byte of sequance to al
    171	0194  AB			     stosw	     ; writing to video	mem
Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 4
frame.asm



    172
    173	0195  59			     pop cx	     ; save cx
    174
    175	0196  D1 E1			     shl cx, 1	     ; shift di	to the beginning of the	next string
    176	0198  81 C7 00A0		     add di, 0A0h
    177	019C  2B F9			     sub di, cx
    178	019E  D1 E9			     shr cx, 1
    179
    180	01A0  5E			     pop si	     ; save si
    181
    182	01A1  C3			     ret
    183	01A2				     endp
    184				     ;===============================================================================================
    185				     ==============
    186				     ; Moves di	until ds:[di] is a non-space character
    187				     ; Entry:	 di - pointer to video mem for beginning of the	string
    188				     ; Exit:	 None
    189				     ; Destr:	 di, al
    190				     ;===============================================================================================
    191				     ==============
    192	01A2			     SkipSpaces	  proc
    193
    194	01A2  B0 20			     mov al, ' '
    195	01A4  4F			     dec di
    196
    197	01A5			     test_condition_SkipSpace:
    198	01A5  47			     inc di
    199	01A6  38 05			     cmp ds:[di], al
    200	01A8  74 FB			     je	test_condition_SkipSpace
    201
    202	01AA  C3			     ret
    203	01AB				     endp
    204
    205				     ;===============================================================================================
    206				     ==============
    207				     ; Writes a	string ending with '$' in video	mem
    208				     ; Entry:	 ah - color
    209				     ;		 si - pointer to a string
    210				     ;		 di - pointer to video mem for beginning of the	string
    211				     ; Exit:	 None
    212				     ; Destr:	 cx, si, di
    213				     ;===============================================================================================
    214				     ==============
    215	01AB			     WriteString proc
    216
    217	01AB  B1 00			     mov cl, 00h
    218
    219	01AD			     test_condition_WriteString:
    220	01AD  38 0C			     cmp ds:[si], cl	; while	(ds:[si] != '$')
    221	01AF  74 04			     je	while_end
    222
    223	01B1  AC			     lodsb		 ; al =	ds:[si++]
    224	01B2  AB			     stosw		 ; es:[di] = ax, di+=2
    225	01B3  EB F8			     jmp test_condition_WriteString
    226
    227	01B5			     while_end:
    228
Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 5
frame.asm



    229	01B5  C3			     ret
    230	01B6				     endp
    231
    232				     ;===============================================================================================
    233				     ==============
    234				     ; Counts length of	null terminated	string
    235				     ; Entry:	 di - pointer to a string
    236				     ; Exit:	 cx - length of	the string
    237				     ; Destr:	 al, si, cx
    238				     ;===============================================================================================
    239				     ==============
    240	01B6			     Strlen  proc
    241
    242	01B6  06			     push es
    243	01B7  8C D8			     mov ax, ds
    244	01B9  8E C0			     mov es, ax
    245
    246	01BB  33 C0			     xor ax, ax
    247	01BD  FC			     cld
    248	01BE  B9 FFFF			     mov cx, -1
    249
    250	01C1  F2> AE			     repne scasb
    251	01C3  F7 D9			     neg cx
    252	01C5  49			     dec cx
    253
    254	01C6  07			     pop es
    255
    256	01C7  C3			     ret
    257	01C8				     endp
    258
    259				     ;===============================================================================================
    260				     ==============
    261				     ; Reads 10-based number from 0 to 255 from	a string and saves to al
    262				     ; Entry:	 di - pointer to a string with number
    263				     ; Exit:	 al - number extracted from string
    264				     ; Destr:	 di, ax, dx, bl
    265				     ;===============================================================================================
    266				     ==============
    267	01C8			     atoi10  proc
    268
    269	01C8  33 C0			     xor ax, ax
    270	01CA  33 D2			     xor dx, dx
    271	01CC  B6 30			     mov dh, '0'
    272	01CE  B3 0A			     mov bl, 0Ah     ; 0Ah - radix of 10 digit system
    273
    274	01D0			     test_condition_atoi10:	   ; while (ds:[di] - '0' < 10)	{ ax = ax * 10 + [di] -	'0'}
    275	01D0  F6 E3			     mul bl
    276	01D2  02 C2			     add al, dl
    277
    278	01D4  8A 15			     mov dl, ds:[di]
    279	01D6  2A D6			     sub dl, dh
    280
    281	01D8  47			     inc di
    282	01D9  80 FA 0A			     cmp dl, 0Ah	     ; ?  0 <= dl < 10
    283	01DC  72 F2			     jb	test_condition_atoi10
    284
    285	01DE  C3			     ret
Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 6
frame.asm



    286	01DF				     endp
    287
    288				     ;===============================================================================================
    289				     ==============
    290				     ; Reads 16-based number from 0 to 255 from	a string and saves to al
    291				     ; Entry:	 di - pointer to a string with number
    292				     ; Exit:	 ax - number extracted from string
    293				     ; Destr:	 di, ax, dx
    294				     ;===============================================================================================
    295				     ==============
    296	01DF			     atoi16  proc
    297
    298	01DF  33 C0			     xor ax, ax
    299	01E1  33 D2			     xor dx, dx
    300	01E3  B6 30			     mov dh, '0'
    301
    302	01E5			     test_condition_atoi16:  ; while (ds:[di] -	'0' < 10) { ax = ax * 10 + [di]	- '0'}
    303	01E5  D0 E0 D0 E0 D0 E0	D0+	     shl al, 4
    304	      E0
    305	01ED  02 C2			     add al, dl
    306
    307	01EF  8A 15			     mov dl, ds:[di]
    308	01F1  2A D6			     sub dl, dh
    309
    310	01F3  47			     inc di
    311	01F4  80 FA 10			     cmp dl, 10h	     ; 10h - radix of 16 digit system
    312	01F7  72 EC			     jb	test_condition_atoi16
    313
    314	01F9  C3			     ret
    315	01FA				     endp
    316
    317	      =0081		     CMD_args_start  equ     0081h
    318	      =B800		     VideoMemSegment equ     0b800h
    319
    320	01FA  31 32 62		     AtoiTest:	 db '12b'
    321
    322	01FD  31 32 33 34 35 36	37+  Sequence:	 db  031h, 032h, 033h, 034h, 035h, 036h, 037h, 038h, 039h    ; 123456789 - test	    +
    323	      38 39		     sequence
    324	0206  DA C4 BF B3 20 B3	C0+		 db  0dah, 0c4h, 0bfh, 0b3h, 020h, 0b3h, 0c0h, 0c4h, 0d9h    ; single line box
    325	      C4 D9
    326	020F  C9 CD BB BA 20 BA	C8+		 db  0c9h, 0cdh, 0bbh, 0bah, 020h, 0bah, 0c8h, 0cdh, 0bch    ; double line box
    327	      CD BC
    328	0218  03 03 03 03 20 03	03+		 db  003h, 003h, 003h, 003h, 020h, 003h, 003h, 003h, 003h    ; valentine frame
    329	      03 03
    330	0221  06 06 06 05 B0 06	05+		 db  006h, 006h, 006h, 005h, 0b0h, 006h, 005h, 005h, 005h    ; spades frame with    +
    331	      05 05		     shade filling
    332
    333	022A  48 65 6C 6C 6F 20	74+  String:	 db 'Hello there?', 00h, '!!!NOTFORPRINT!!!'
    334	      68 65 72 65 3F 00	21+
    335	      21 21 4E 4F 54 46	4F+
    336	      52 50 52 49 4E 54	21+
    337	      21 21
    338
    339
    340				     end     Start
Turbo Assembler	 Version 4.1	    02/13/25 19:01:22	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/13/25"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "19:01:22"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI10				  Near	 DGROUP:01C8
ATOI16				  Near	 DGROUP:01DF
ATOITEST			  Near	 DGROUP:01FA
CALCFRAMESTART			  Near	 DGROUP:0146
CMD_ARGS_START			  Number 0081
DRAWFRAME			  Near	 DGROUP:016A
DRAWLINE			  Near	 DGROUP:018A
HEIGHT				  Near	 DGROUP:0175
SEQUENCE			  Near	 DGROUP:01FD
SKIPSPACES			  Near	 DGROUP:01A2
START				  Near	 DGROUP:0100
STRING				  Near	 DGROUP:022A
STRLEN				  Near	 DGROUP:01B6
TEST_CONDITION_ATOI10		  Near	 DGROUP:01D0
TEST_CONDITION_ATOI16		  Near	 DGROUP:01E5
TEST_CONDITION_SKIPSPACE	  Near	 DGROUP:01A5
TEST_CONDITION_WRITESTRING	  Near	 DGROUP:01AD
VIDEOMEMSEGMENT			  Number B800
WHILE_END			  Near	 DGROUP:01B5
WRITESTRING			  Near	 DGROUP:01AB

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0248 Word	  Public  CODE
