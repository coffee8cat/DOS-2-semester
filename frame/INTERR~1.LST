Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 1
interr~1.asm



      1	    0000			 .model	tiny
      2	    0000			 .code
      3					 .386
      4					 org 100h
      5					 locals	@@
      6
      7	    0100			 Start:
      8
      9		  =0003			 FrameColor	 equ	 03h
     10		  =0009			 FrameLength	 equ	 09h
     11		  =0006			 FrameHeight	 equ	 06h
     12
     13		  =0004			 DisplayedRegNum equ	 04h
     14		  =0002			 RegSize	 equ	 02h
     15
     16		  = db 0eah		 JMP_code	 equ	 db 0eah
     17
     18		  =0060			 KeyboardPort	 equ	 60h
     19
     20					 ; Rewriting INT09H in Table of								    +
     21					 Interruptions-----------------------------------------------------------
     22
     23					     ; set es[bx] to a INT09H pointer
     24	    0100  33 C0				 xor ax, ax
     25	    0102  8E C0				 mov es, ax
     26	    0104  B9 1234			 mov cx, 1234h
     27	    0107  BA 5678			 mov dx, 5678h
     28	    010A  BB 0024			 mov bx, 09h * 04h
     29
     30					     ; Save old	handler	of INT09H
     31	    010D  26: 8B 07			 mov ax, es:[bx]
     32	    0110  A3 018Er			 mov word ptr old_int9_ofs, ax
     33	    0113  26: 8B 47 02			 mov ax, es:[bx+2]
     34	    0117  A3 0190r			 mov word ptr old_int9_seg, ax
     35
     36					     ; write new handler for INT09H
     37					     ; Forbid interrupts to avoid trying to handle interruption	with wrong function address
     38	    011A  FA				 cli
     39	    011B  26: C7 07 0157r		 mov es:[bx], offset INT09H_StandIn
*Warning* interr~1.asm(38) Argument needs type override
     40	    0120  0E				 push cs
     41	    0121  58				 pop ax
     42	    0122  26: 89 47 02			 mov es:[bx+2],	ax
     43	    0126  FB				 sti
     44
     45						 ;int 09h
     46					 ; Rewriting INT08H in Table of								    +
     47					 Interruptions-----------------------------------------------------------
     48
     49					     ; set es[bx] to a INT08H pointer
     50	    0127  33 C0				 xor ax, ax
     51	    0129  8E C0				 mov es, ax
     52	    012B  BB 0020			 mov bx, 08h * 04h
     53
     54					     ; Save old	handler	of INT08H
     55	    012E  26: 8B 07			 mov ax, es:[bx]
     56	    0131  A3 01D6r			 mov word ptr old_int8_ofs, ax
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 2
interr~1.asm



     57	    0134  26: 8B 47 02			 mov ax, es:[bx+2]
     58	    0138  A3 01D8r			 mov word ptr old_int8_seg, ax
     59
     60					     ; write new handler for INT08H
     61					     ; Forbid interrupts to avoid trying to handle interruption	with wrong function address
     62	    013B  FA				 cli
     63	    013C  26: C7 07 0193r		 mov es:[bx], offset INT08H_StandIn
*Warning* interr~1.asm(61) Argument needs type override
     64	    0141  0E				 push cs
     65	    0142  58				 pop ax
     66	    0143  26: 89 47 02			 mov es:[bx+2],	ax
     67	    0147  FB				 sti
     68
     69	    0148  E8 008F			 call PrepareToDisplay
     70
     71					 ; Terminate and Stay									    +
     72					 Resident--------------------------------------------------------------------------
     73	    014B  B8 3100			 mov ax, 3100h		 ; TSR
     74	    014E  BA 0318r			 mov dx, offset	EOP	 ; programm size in paragraphs (16 byte)
     75	    0151  C1 EA	04			 shr dx, 4
     76	    0154  42				 inc dx
     77	    0155  CD 21				 int 21h
     78
     79					 ;===========================================================================================
     80					 ==================
     81					 ; Called from INT09H, draws frame to display registers	values (frame active) if interruption
     82					 ; caused by pressing [R]. Erases frame	on second press	of [R].
     83					 ; At the end of function jumps	to original INT09H handler
     84					 ; Entry:    None
     85					 ; Exit:     None
     86					 ; Destr:    al
     87					 ;===========================================================================================
     88					 ==================
     89	    0157			 INT09H_StandIn	 proc
     90
     91		  =0013			 R_scan_code equ 013h
     92
     93	    0157  06				 push es
     94	    0158  57				 push di
     95
     96	    0159  52				 push dx
     97	    015A  51				 push cx
     98	    015B  53				 push bx
     99	    015C  50				 push ax
    100
    101					 ; if (scan_code != scan_code(R)) { jmp	to old INT09H handler}
    102	    015D  E4 60				 in al,	KeyboardPort		 ; load	key scan code
    103
    104	    015F  3C 13				 cmp al, R_scan_code
    105	    0161  75 24	90 90			 jne end_INT09H_StandIn
    106
    107	    0165  BB B800 90			 mov bx, VideoMemSegment	 ; set es to the beginnig of video mem segment
    108	    0169  8E C3				 mov es, bx
    109
    110					 ; if (Active == 1) { erase frame, Active = 0} else { Make frame, Active = 1}
    111	    016B  80 3E	0192r 00		 cmp byte ptr Frame_Active, 0b
    112	    0170  74 0D	90 90			 je  @@not_Active
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 3
interr~1.asm



    113
    114					 ; Frame is active, erase frame
    115
    116	    0174  E8 0084			 call EraseFrame
    117	    0177  C6 06	0192r 00		 mov byte ptr Frame_Active, 0b
    118	    017C  EB 09	90			 jmp end_INT09H_StandIn
    119
    120	    017F			 @@not_Active:
    121
    122	    017F  E8 008E			 call MakeFrame
    123	    0182  C6 06	0192r 01		 mov byte ptr Frame_active, 1b
    124
    125	    0187			 end_INT09H_StandIn:
    126
    127	    0187  58				 pop ax
    128	    0188  5B				 pop bx
    129	    0189  59				 pop cx
    130	    018A  5A				 pop dx
    131
    132	    018B  5F				 pop di
    133	    018C  07				 pop es
    134
    135	    018D  EA				 JMP_code
    136	    018E  0000			 old_int9_ofs:	 dw 0
    137	    0190  0000			 old_int9_seg:	 dw 0
    138
    139	    0192  00			 Frame_Active:	 db 0
    140	    0193				 endp
    141					 ;===========================================================================================
    142					 ==================
    143					 ; Called from INT08H, displays	registers values if frame is active.
    144					 ; At the end of function jumps	to original INT08H handler
    145					 ; Entry:    None
    146					 ; Exit:     None
    147					 ; Destr:    al
    148					 ;===========================================================================================
    149					 ==================
    150	    0193			 INT08H_StandIn	 proc
    151
    152	    0193  06				 push es
    153	    0194  57				 push di
    154
    155	    0195  52				 push dx
    156	    0196  51				 push cx
    157	    0197  53				 push bx
    158	    0198  50				 push ax
    159
    160	    0199  80 3E	0192r 01		 cmp byte ptr Frame_Active, 1b
    161	    019E  75 2F	90 90			 jne @@end_INT08H_StandIn
    162
    163	    01A2  BB B800 90			 mov bx, VideoMemSegment     ; set es to the beginnig of video mem segment
    164	    01A6  8E C3				 mov es, bx
    165
    166					 ; Displaying registers	values------------------------------
    167
    168	    01A8  BB 01F9r			 mov bx, offset	RegValuesOff
    169	    01AB  2E: 8B 3F			 mov word ptr di, cs:[bx]
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 4
interr~1.asm



    170
    171	    01AE  8B DC				 mov bx, sp
    172	    01B0  33 C9				 xor cx, cx
    173
    174	    01B2  B5 04				 mov ch, DisplayedRegNum
    175	    01B4			 @@for_cond_check:
    176
    177	    01B4  3A CD				 cmp cl, ch
    178	    01B6  74 17	90 90			 je  @@for_end
    179
    180	    01BA  83 C3	02			 add bx, RegSize
    181	    01BD  36: 8B 07			 mov ax, word ptr ss:[bx]
    182	    01C0  81 C7	00A0			 add di, 0A0h
    183
    184	    01C4  53				 push bx
    185	    01C5  51				 push cx
    186	    01C6  E8 010E			 call itoa_hex
    187	    01C9  59				 pop cx
    188	    01CA  5B				 pop bx
    189
    190	    01CB  FE C1				 inc cl
    191	    01CD  EB E5				 jmp @@for_cond_check
    192
    193	    01CF			 @@for_end:
    194
    195	    01CF			 @@end_INT08H_StandIn:
    196
    197	    01CF  58				 pop ax
    198	    01D0  5B				 pop bx
    199	    01D1  59				 pop cx
    200	    01D2  5A				 pop dx
    201
    202	    01D3  5F				 pop di
    203	    01D4  07				 pop es
    204
    205	    01D5  EA				 JMP_code
    206	    01D6  0000			 old_int8_ofs:	 dw 0
    207	    01D8  0000			 old_int8_seg:	 dw 0
    208
    209	    01DA				 endp
    210
    211					 ;===========================================================================================
    212					 ==================
    213					 ; Calculate and save start es:[di] position of	frame and register values displaying
    214					 ; assuming es = B800h (Video Memory Segment)
    215					 ; Entry:    None
    216					 ; Exit:     None
    217					 ; Destr:    ax
    218					 ;===========================================================================================
    219					 ==================
    220	    01DA			 PrepareToDisplay	 proc
    221
    222
    223	    01DA  BB B800 90			 mov bx, VideoMemSegment     ; set es to the beginnig of video mem segment
    224	    01DE  8E C3				 mov es, bx
    225
    226	    01E0  B9 0009			 mov cx, FrameLength
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 5
interr~1.asm



    227	    01E3  BA 0006			 mov dx, FrameHeight
    228
    229	    01E6  E8 0079			 call CalcFrameStart
    230
    231	    01E9  2E: 89 3E 01F7r		 mov word ptr cs:[offset FrameOff], di
    232
    233	    01EE  83 C7	0E			 add di, 0Eh	 ; 8 + 6
    234	    01F1  2E: 89 3E 01F9r		 mov word ptr cs:[offset RegValuesOff],	di
    235
    236	    01F6  C3				 ret
    237	    01F7				 endp
    238
    239	    01F7  0000			 FrameOff:	 dw 0	; frame	start position in VideoMemSeg
    240	    01F9  0000			 RegValuesOff:	 dw 0	; start	position in VideoMemSeg	for writing registers values
    241
    242					 ;===========================================================================================
    243					 ==================
    244					 ; Erase frame displayed on es:[offset FrameOff], filling with '0h', '20h' - space char	on  +
    245					 black
    246					 ; Entry:    None
    247					 ; Exit:     None
    248					 ; Destr:    ax
    249					 ;===========================================================================================
    250					 ==================
    251	    01FB			 EraseFrame	 proc
    252
    253	    01FB  BB 01F7r			 mov bx, offset	FrameOff
    254	    01FE  2E: 8B 3F			 mov word ptr di, cs:[bx]
    255
    256	    0201  BE 0248r			 mov si, offset	Sequence + 9	 ; empty space seq
    257	    0204  32 E4				 xor ah, ah
    258
    259	    0206  B9 0009			 mov cx, FrameLength
    260	    0209  BA 0006			 mov dx, FrameHeight
    261
    262	    020C  E8 0074			 call DrawFrame
    263
    264	    020F  C3				 ret
    265	    0210				 endp
    266
    267					 ;===========================================================================================
    268					 ==================
    269					 ; Makes a frame for displaying	registers values
    270					 ;
    271					 ;
    272					 ;
    273					 ;		 NOT VALID DESCRIPTION
    274					 ;
    275					 ;
    276
    277					 ; Entry:    cx	- length of the	frame
    278					 ;	     dx	- height of the	frame
    279					 ; Exit:     di	- pointer to a start position
    280					 ; Destr:    ax
    281					 ;===========================================================================================
    282					 ==================
    283	    0210			 MakeFrame   proc
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 6
interr~1.asm



    284
    285	    0210  BB B800 90			 mov bx, VideoMemSegment     ; set es to the beginnig of video mem segment
    286	    0214  8E C3				 mov es, bx
    287
    288					 ; Drawing Frame--------------------------------------------
    289
    290
    291	    0216  BB 01F7r			 mov bx, offset	FrameOff
    292	    0219  2E: 8B 3F			 mov word ptr di, cs:[bx]
    293	    021C  57				 push di
    294
    295	    021D  BE 023Fr			 mov si, offset	Sequence
    296	    0220  B4 03				 mov ah, 03h
    297
    298	    0222  B9 0009			 mov cx, FrameLength
    299	    0225  BA 0006			 mov dx, FrameHeight
    300
    301	    0228  E8 0058			 call DrawFrame
    302
    303	    022B  5F				 pop di
    304					 ; Write registers names------------------------------------
    305
    306						 ; di will be shifted to the begining of the first string for first WriteString
    307	    022C  83 C7	08			 add di, 08h
    308	    022F  BE 0251r			 mov si, offset	RegName
    309
    310	    0232			 @@loop:
    311	    0232  81 C7	009A			 add di, 09Ah		 ; considering length_of_strings = 3, di_shift = 160 - 3 * 2
    312	    0236  E8 0089			 call WriteString
    313
    314	    0239  2E: 38 0C			 cmp cs:[si], cl	 ; after WriteString 0Dh stored	in cl
    315	    023C  75 F4				 jne @@loop		 ; writing strings until '0Dh',	'0Dh' is met
    316
    317	    023E  C3				 ret
    318	    023F				 endp
    319
    320	    023F  C9 CD	BB BA 20 BA C8+	 Sequence:   db	 0c9h, 0cdh, 0bbh, 0bah, 020h, 0bah, 0c8h, 0cdh, 0bch	 ; double line box
    321		  CD BC
    322	    0248  20 20	20 20 20 20 20+		     db	 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h	 ; empty black space
    323		  20 20
    324
    325	    0251  61 78	3A 0D 62 78 3A+	 RegName:    db	 'ax:',	0Dh, 'bx:', 0Dh, 'cx:',	0Dh, 'dx:', 0Dh, 0Dh
    326		  0D 63	78 3A 0D 64 78+
    327		  3A 0D	0D
    328
    329					 ;===========================================================================================
    330					 ==================
    331					 ; Calculates the start	position for a frame in	video mem
    332					 ; Entry:    cx	- length of the	frame
    333					 ;	     dx	- height of the	frame
    334					 ; Exit:     di	- pointer to a start position
    335					 ; Destr:    ax
    336					 ;===========================================================================================
    337					 ==================
    338	    0262			 CalcFrameStart	 proc
    339
    340	    0262  51				 push cx
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 7
interr~1.asm



    341	    0263  52				 push dx
    342	    0264  8B C2				 mov ax, dx
    343
    344						 ; di =	(80 - cx / 2 + 160 * (14 - dx /	2)) / 2	* 2
    345	    0266  D1 E8				 shr ax, 1
    346
    347	    0268  BF 0050			 mov di, 0050h
    348	    026B  2B F9				 sub di, cx
    349
    350	    026D  2D 000E			 sub ax, 0Eh
    351	    0270  F7 D8				 neg ax
    352	    0272  C1 E0	05			 shl ax, 5
    353
    354	    0275  B9 0005			 mov cx, 05h
    355	    0278  F7 E1				 mul cx
    356
    357	    027A  03 F8				 add di, ax
    358
    359	    027C  D1 EF				 shr di, 1		 ; round to a multiple of 2
    360	    027E  D1 E7				 shl di, 1
    361
    362	    0280  5A				 pop dx
    363	    0281  59				 pop cx
    364
    365	    0282  C3				 ret
    366	    0283				 endp
    367
    368
    369					 ;===========================================================================================
    370					 ==================
    371					 ; Draws a frame in video mem described	with 9 bytes
    372					 ; Entry:    ah	- color
    373					 ;	     si	- pointer to 9 byte sequence
    374					 ;	     cx	- length of the	frame
    375					 ;	     dx	- height of the	frame
    376					 ; Exit:     None
    377					 ; Destr:    al, si, di
    378					 ;===========================================================================================
    379					 ==================
    380	    0283			 DrawFrame   proc
    381
    382	    0283  52				 push dx
    383	    0284  1E				 push ds
    384	    0285  8C CB				 mov bx, cs
    385	    0287  8E DB				 mov ds, bx
    386
    387	    0289  E8 001D			 call DrawLine
    388	    028C  83 C6	03			 add si, 03h		 ; move	to the next subsequence
    389
    390	    028F  FE CA				 dec dl
    391	    0291  FE CA				 dec dl
    392	    0293			 height:
    393	    0293  E8 0013			 call DrawLine
    394	    0296  FE CA				 dec dl
    395	    0298  80 FA	00			 cmp dl, 0h
    396	    029B  77 F6				 ja height
    397
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 8
interr~1.asm



    398	    029D  83 C6	03			 add si, 03h
    399
    400	    02A0  E8 0006			 call DrawLine
    401	    02A3  83 C6	03			 add si, 03h
    402
    403	    02A6  1F				 pop ds
    404	    02A7  5A				 pop dx
    405
    406	    02A8  C3				 ret
    407	    02A9				 endp
    408
    409					 ;===========================================================================================
    410					 ==================
    411					 ; Draws line described	with 3 bytes in	video mem
    412					 ; 1 time first	byte, (cx-2) times - second byte and then third	byte
    413					 ; 121 (cx = 6)	=> 122221
    414					 ; Entry:    ah	- color
    415					 ;	     si	- pointer to 3 byte sequence
    416					 ;	     cx	- length of the	frame
    417					 ; Exit:     None
    418					 ; Destr:    al, di
    419					 ;===========================================================================================
    420					 ==================
    421	    02A9			 DrawLine    proc
    422
    423	    02A9  56				 push si	 ; save	si
    424	    02AA  51				 push cx	 ; save	cx
    425
    426	    02AB  49				 dec cx
    427	    02AC  49				 dec cx
    428
    429	    02AD  FC				 cld
    430	    02AE  AC				 lodsb		 ; reading first byte of sequance to al
    431	    02AF  AB				 stosw		 ; writing to video mem
    432
    433	    02B0  AC				 lodsb		 ; reading second byte
    434	    02B1  F3> AB			 rep stosw	 ; writing (cx - 2) times to video mem
    435
    436	    02B3  AC				 lodsb		 ; reading first byte of sequance to al
    437	    02B4  AB				 stosw		 ; writing to video mem
    438
    439	    02B5  59				 pop cx		 ; save	cx
    440
    441	    02B6  D1 E1				 shl cx, 1	 ; shift di to the beginning of	the next string
    442	    02B8  81 C7	00A0			 add di, 0A0h
    443	    02BC  2B F9				 sub di, cx
    444	    02BE  D1 E9				 shr cx, 1
    445
    446	    02C0  5E				 pop si		 ; save	si
    447
    448	    02C1  C3				 ret
    449	    02C2				 endp
    450
    451					 ;===========================================================================================
    452					 ==================
    453					 ; Writes a string ending with '\r' in video mem (could	be set in cl - look in func)
    454					 ; Entry:    ah	- color
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 9
interr~1.asm



    455					 ;	     si	- pointer to a string
    456					 ;	     di	- pointer to video mem for beginning of	the string
    457					 ; Exit:     None
    458					 ; Destr:    cx, si, di
    459					 ;===========================================================================================
    460					 ==================
    461	    02C2			 WriteString proc
    462
    463	    02C2  1E				 push ds
    464	    02C3  8C CB				 mov bx, cs
    465	    02C5  8E DB				 mov ds, bx
    466
    467	    02C7  B1 0D				 mov cl, 0Dh		 ; TERMINATING SYMBOL
    468
    469	    02C9			 @@test_condition:
    470	    02C9  2E: 38 0C			 cmp cs:[si], cl	 ; while (ds:[si] != cl)
    471	    02CC  74 06	90 90			 je while_end
    472
    473	    02D0  AC				 lodsb			 ; al =	ds:[si++]
    474	    02D1  AB				 stosw			 ; es:[di] = ax, di+=2
    475	    02D2  EB F5				 jmp @@test_condition
    476
    477	    02D4			 while_end:
    478
    479	    02D4  46				 inc si
    480	    02D5  1F				 pop ds
    481
    482	    02D6  C3				 ret
    483	    02D7				 endp
    484
    485					 ;===========================================================================================
    486					 ==================
    487					 ; Reads 16-based number from 0	to 255 from a string and saves to al
    488					 ; Entry:    di	- pointer to a string to write a number
    489					 ;	     ax	- value	to translate
    490					 ; Exit:     None
    491					 ; Destr:    di, si, ax, bx, cx
    492					 ;===========================================================================================
    493					 ==================
    494	    02D7			 itoa_hex    proc
    495
    496	    02D7  57				 push di
    497
    498						 ; bx =	ax // 16
    499						 ; for (i =0; i	< 4; i++) { es:[di] = ax % 16, ax = ax // 16}
    500
    501	    02D8  33 C9				 xor cx, cx
    502	    02DA  B5 04				 mov ch, RegSize * 2
    503	    02DC  BE 0308r			 mov si, offset	HexASCII
    504
    505	    02DF			 @@for_cond_check:
    506
    507	    02DF  3A CD				 cmp cl, ch
    508	    02E1  74 23	90 90			 je  @@for_end
    509
    510	    02E5  8B D8				 mov bx, ax
    511	    02E7  C1 EB	04			 shr bx, 4
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 10
interr~1.asm



    512	    02EA  C1 E3	04			 shl bx, 4
    513
    514	    02ED  56				 push si
    515
    516	    02EE  03 F0				 add si, ax
    517	    02F0  2B F3				 sub si, bx
    518
    519	    02F2  2B C3				 sub ax, bx
    520	    02F4  2E: 8A 04			 mov byte ptr al, cs:[si]
    521	    02F7  26: 88 05			 mov byte ptr es:[di], al
    522	    02FA  4F				 dec di
    523	    02FB  4F				 dec di
    524	    02FC  5E				 pop si
    525
    526	    02FD  8B C3				 mov ax, bx
    527	    02FF  C1 E8	04			 shr ax, 4
    528	    0302  FE C1				 inc cl
    529	    0304  EB D9				 jmp @@for_cond_check
    530
    531	    0306			 @@for_end:
    532
    533	    0306  5F				 pop di
    534
    535	    0307  C3				 ret
    536	    0308				 endp
    537
    538
    539	    0308  30 31	32 33 34 35 36+	 HexASCII:   db	'0', '1', '2', '3', '4', '5', '6', '7'
    540		  37
    541	    0310  38 39	41 42 43 44 45+		     db	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
    542		  46
    543
    544		  =B800			 VideoMemSegment equ	 0b800h
    545
    546	    0318  00			 EOP:	 db 0
    547					 end	 Start
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/23/25"
??FILENAME			  Text	 "interr~1"
??TIME				  Text	 "12:21:46"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@END_INT08H_STANDIN		  Near	 DGROUP:01CF
@@FOR_COND_CHECK		  Near	 DGROUP:01B4
@@FOR_COND_CHECK		  Near	 DGROUP:02DF
@@FOR_END			  Near	 DGROUP:01CF
@@FOR_END			  Near	 DGROUP:0306
@@LOOP				  Near	 DGROUP:0232
@@NOT_ACTIVE			  Near	 DGROUP:017F
@@TEST_CONDITION		  Near	 DGROUP:02C9
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 INTERR~1
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 4
CALCFRAMESTART			  Near	 DGROUP:0262
DISPLAYEDREGNUM			  Number 0004
DRAWFRAME			  Near	 DGROUP:0283
DRAWLINE			  Near	 DGROUP:02A9
END_INT09H_STANDIN		  Near	 DGROUP:0187
EOP				  Near	 DGROUP:0318
ERASEFRAME			  Near	 DGROUP:01FB
FRAMECOLOR			  Number 0003
FRAMEHEIGHT			  Number 0006
FRAMELENGTH			  Number 0009
FRAMEOFF			  Near	 DGROUP:01F7
FRAME_ACTIVE			  Near	 DGROUP:0192
HEIGHT				  Near	 DGROUP:0293
HEXASCII			  Near	 DGROUP:0308
INT08H_STANDIN			  Near	 DGROUP:0193
INT09H_STANDIN			  Near	 DGROUP:0157
ITOA_HEX			  Near	 DGROUP:02D7
JMP_CODE			  Text	 db 0eah
KEYBOARDPORT			  Number 0060
MAKEFRAME			  Near	 DGROUP:0210
OLD_INT8_OFS			  Near	 DGROUP:01D6
OLD_INT8_SEG			  Near	 DGROUP:01D8
OLD_INT9_OFS			  Near	 DGROUP:018E
OLD_INT9_SEG			  Near	 DGROUP:0190
PREPARETODISPLAY		  Near	 DGROUP:01DA
REGNAME				  Near	 DGROUP:0251
REGSIZE				  Number 0002
REGVALUESOFF			  Near	 DGROUP:01F9
R_SCAN_CODE			  Number 0013
SEQUENCE			  Near	 DGROUP:023F
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 12
Symbol Table



START				  Near	 DGROUP:0100
VIDEOMEMSEGMENT			  Number B800
WHILE_END			  Near	 DGROUP:02D4
WRITESTRING			  Near	 DGROUP:02C2

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0319 Word	  Public  CODE
Turbo Assembler	 Version 4.1	    02/23/25 12:21:46	    Page 13
Error Summary



*Warning* interr~1.asm(38) Argument needs type override
*Warning* interr~1.asm(61) Argument needs type override
